version = 3.8.4
style = defaultWithAlign
maxColumn = 120
lineEndings = unix
importSelectors = singleLine

project {
  git = true
}

runner {
  dialect = scala212
}

align = none

align {
  tokens = [ {code = "=>", owner = "Case|Type.Arg.ByName"}, "<-", "->", "%", "%%" ]
  arrowEnumeratorGenerator = true
  openParenCallSite = false
  openParenDefnSite = false
}
align.multiline = false
#align.openParenTupleSite = true

# align.preset = none
# align.openParenDefnSite = false
# align.openParenCallSite = false
# danglingParentheses.preset = true

indent.extendSite = 0
indent.withSiteRelativeToExtends = 0
indent.defnSite = 2
indent.ctorSite = 2

binPack.literalArgumentLists = false
binPack.literalsMinArgCount = 2
binPack.parentConstructors = ForceBreak
binPack.defnSite = Never

continuationIndent {
  callSite = 2
  defnSite = 2
}

newlines {
  penalizeSingleSelectMultiArgList = false
  sometimesBeforeColonInMethodReturnType = true
  beforeMultiline = unfold
#  beforeMultilineDef = unfold
#  alwaysBeforeMultilineDef = true
  selectChains = unfold
}

#newlines.beforeOpenParenDefnSite = unfold  #keep, fold, unfold
#newlines.implicitParamListModifierForce = [after]
newlines.configStyle.callSite.forceIfOptimized = true
newlines.configStyle.defnSite.forceIfOptimized = true

danglingParentheses.defnSite = false
danglingParentheses.callSite = true


rewrite {
  rules = [RedundantBraces, RedundantParens, AsciiSortImports]
  redundantBraces {
    maxLines = 100
    includeUnitMethods = true
    stringInterpolation = true
  }
}

spaces {
  inImportCurlyBraces = false
  beforeContextBoundColon = false
}

assumeStandardLibraryStripMargin = true